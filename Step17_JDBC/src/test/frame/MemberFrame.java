package test.frame;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import test.dao.MemberDao;
import test.dto.MemberDto;
/*
 *1. 선택된 row 인덱스를 읽어온다.
 *	int selectedIndex=table.getSelectedRow();
 *
 *2. 선택된 row 의 첫번째(0번째) 칼럼의 숫자를 읽어온다(삭제할 회원의 번호)
 *	int num=(int)model.getValueAt(selectedIndex, 0);
 */
public class MemberFrame extends JFrame implements ActionListener, PropertyChangeListener{
   //필드
   JTextField inputName, inputAddr;
   DefaultTableModel model;
   JTable table;
   MemberDao dao;
   
   //생성자 준비할게 있으면 여기다
   public MemberFrame() {
      setLayout(new BorderLayout());
      
      JLabel label1=new JLabel("이름");
      inputName=new JTextField(10);
      
      JLabel label2=new JLabel("주소");
      inputAddr=new JTextField(10);
      
      JButton saveBtn=new JButton("저장");
      saveBtn.setActionCommand("save");
      saveBtn.addActionListener(this);//버튼을 눌렀는지 감시
      //삭제 버튼 추가
      JButton deleteBtn=new JButton("삭제");
      deleteBtn.setActionCommand("delete");
      deleteBtn.addActionListener(this);
      JPanel panel=new JPanel();
      panel.add(label1);
      panel.add(inputName);
      panel.add(label2);
      panel.add(inputAddr);
      panel.add(saveBtn);
      panel.add(deleteBtn);
      
      add(panel, BorderLayout.NORTH);//JFrame 의 메소드
      
      //표 형식으로 정보를 출력하기 위한 JTable(UI)
      table=new JTable();
      //칼럼명을 String[] 에 순서대로 준비
      String[] colNames= {"번호", "이름", "주소"};
      //테이블에 출력할 정보를 가지고 있는 모델 객체 (칼럼명, row 갯수) data
      model=new DefaultTableModel(colNames, 0) {
          @Override
          public boolean isCellEditable(int row, int column) {
             System.out.println(row+" | "+column);
             
             if(column==0) { // 0번째 칼럼은 
                return false; //수정 불가하게 false 를 리턴해 준다.
             }else { //다른 경우는 
                return true; //모두 수정 가능하게 true 를 리턴해 준다. 
             }
          }
       };
      //모델을 테이블에 연결한다.
      table.setModel(model);
      //스크롤이 가능 하도록 테이블을 JScrollPane 에 감싼다.
      JScrollPane scroll=new JScrollPane(table);
      //JScrollPane  을 프레임의 가운데에 배치하기 
      add(scroll, BorderLayout.CENTER);
      
      displayMember();
      //테이블에 값이 바뀌었는지 감시할 리스너 등록
      table.addPropertyChangeListener(this);
   }
   //테이블에 데이터 출력하는 메소드
   public void displayMember() {
	   model.setRowCount(0);
	   //실제 DB에 저장된 데이터
	   dao=new MemberDao();
	   List<MemberDto> list=dao.getList();
	   for(MemberDto dto:list) {
		   //MemberDto 객체에 있는 회원정보를 이용해서 Object 배열을 만든다.
		   Object[] row= {dto.getNum(), dto.getName(), dto.getAddr()};
		   model.addRow(row);
	   }
	   //model.setRowCount(0); 테이블에 출력된 데이터 reset
	   //table.getSelectedRow(); 현재포커스된 로우를 int로 리턴
	   
   }
   //main  메소드
   public static void main(String[] args) {
      MemberFrame f=new MemberFrame();
      f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      f.setBounds(100, 100, 800, 500);
      f.setVisible(true);
   }
   @Override
	public void actionPerformed(ActionEvent e) {
	   //눌러진 버튼의 action command 값을 읽어와서
	   String command = e.getActionCommand();
	   //분기한다
	   try {
		   if(command.equals("save")) {
			   //1. 입력한 이름과, 주소를 읽어온다.
			   String name=inputName.getText();
			   String addr=inputAddr.getText();
			   //2. 읽어온 이름과 주소를 MemberDto 객체를 생성해서 담는다
			   MemberDto dto=new MemberDto();
			   dto.setName(name);
			   dto.setAddr(addr);
			   //3. MemberDao 객체를 이용해서 DB에 저장을한다.
			   dao.insert(dto);
			   //4. refresh!
			   displayMember();
			   
		   }else if(command.equals("delete")) {
			   //1. 선택한 row 가 있는지, 있다면 어떤 row 를 선택했는지 알아내기
			   //int selectedIndex=table.getSelectedRow();
			   int[] rows=table.getSelectedRows();
			   if(rows.length==0) {//없다면 -1 리턴
				   //선택된 row 가 없다고 알려준다.
				   JOptionPane.showMessageDialog(this, "선택된 row 가 없습니다.");
				   //프레임아 밑에 코드는 실행하지마
				   return;
			   }
			   
			   for(int tmp:rows) {
				 //2. 선택한 row 의 가장 첫번째 칼럼에 있는 숫자를 읽어내기
				   int num=(int)model.getValueAt(tmp, 0); // Object 타입이라 int로 캐스팅
				   //3. MemberDao 객체를 이용해서 DB에서 삭제
				   dao.delete(num);
			   }   
			   //4. refresh!
			   displayMember();
		   }
	   	}catch(Exception exe) {
			exe.printStackTrace();
		}
	   
	}
   @Override
   public void propertyChange(PropertyChangeEvent evt) {
	   System.out.println("property change!");
	   System.out.println("property name:"+evt.getPropertyName());
	   
	   System.out.println("isEditing:"+table.isEditing());
	   /*
	    * property name 이 "tableCellEditor" 이고
	    * table 이 수정중이 아닐때
	    * 현재 포커스가 있는 곳의 정보를 모두 읽어와서 DB 에 수정 반영하기
	    */
	   
	   if(evt.getPropertyName().equals("tableCellEditor")&& !table.isEditing()) {
		   //현재 포커스가 있는 row 의 정보를 DB에 수정 반영한다.
		   //변화된 값을 읽어와서 DB 에 반영한다. 
           //수정된 칼럼에 있는 row  전체의 값을 읽어온다. 
           int selectedIndex=table.getSelectedRow();
           int num=(int)model.getValueAt(selectedIndex, 0);
           String name=(String)model.getValueAt(selectedIndex, 1);
           String addr=(String)model.getValueAt(selectedIndex, 2);
           //수정할 회원의 정보를 MemberDto 객체에 담고 
           MemberDto dto=new MemberDto(num, name, addr);
           //DB에 저장하기 
           new MemberDao().update(dto);
           //선택된 포커스 clear 
           table.clearSelection();
	   }
   }
	
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
}
